/* eslint-disable @typescript-eslint/no-var-requires */
const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CompressionPlugin = require('compression-webpack-plugin')
// const CssMinimizerPlugin = require('css-minimizer-webpack-plugin')
const TerserPlugin = require('terser-webpack-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const ESLintPlugin = require('eslint-webpack-plugin')
const Dotenv = require('dotenv-webpack')
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
const webpack = require('webpack')

// C√°i d√≤ng n√†y gi√∫p Editor g·ª£i √Ω ƒë∆∞·ª£c c√°c gi√° tr·ªã cho d√≤ng code config ngay ph√≠a d∆∞·ªõi n√≥
// (gi·ªëng nh∆∞ ƒëang d√πng Typescript v·∫≠y ƒë√≥ üòâ)
/** @type {(env: any, arg: {mode: string}) => import('webpack').Configuration} **/
module.exports = (env, argv) => {
  const isProduction = argv.mode === 'production'
  const isAnalyze = Boolean(env?.analyze)
  /** @type {import('webpack').Configuration} **/
  const config = {
    // Quy ƒë·ªãnh c√°ch webpack gi·∫£i quy·∫øt c√°c file
    resolve: {
      // Gi·∫£i quy·∫øt c√°c file theo th·ª© t·ª± ∆∞u ti√™n t·ª´ tr√°i sang ph·∫£i n·∫øu import
      // c√°c file c√πng m·ªôt t√™n nh∆∞ng c√°c ƒëu√¥i m·ªü r·ªông
      extensions: ['.tsx', '.ts', '.jsx', '.js'],
      alias: {
        '@Components': path.resolve(__dirname, '../src/components'),
        '@Utils': path.resolve(__dirname, '../src/utils'),
        '@Pages': path.resolve(__dirname, '../src/pages'),
        '@Layouts': path.resolve(__dirname, '../src/layouts'),
        '@Assets': path.resolve(__dirname, '../src/assets'),
        '@Types': path.resolve(__dirname, '../src/types'),
        '@Apis': path.resolve(__dirname, '../src/apis')
      }
    },
    // File ƒë·∫ßu v√†o cho webpack, file n√†y th∆∞·ªùng l√† file import m·ªçi file kh√°c
    entry: ['./src/index.tsx'],
    // Khai b√°o c√°c module d√πng trong webpack
    module: {
      rules: [
        {
          // duy·ªát c√°c file .ts || .tsx
          test: /\.tsx?$/,
          // Gi√∫p d·ªãch code TS, React sang JS,
          use: ['babel-loader'],
          exclude: /node_modules/
        },
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          exclude: /node_modules/,
          include: path.resolve(__dirname, './src')
        },
        {
          // duy·ªát c√°c file sass || scss || css
          test: /\.(s[ac]ss|css)$/,
          use: [
            MiniCssExtractPlugin.loader,
            {
              // d√πng import 'filename.css' trong file tsx, ts
              loader: 'css-loader',
              // Hi·ªÉn th·ªã sourcemap ·ªü m√¥i tr∆∞·ªùng dev cho d·ªÖ debug
              options: { sourceMap: !isProduction }
            },
            {
              // bi√™n d·ªãch sass sang css
              loader: 'sass-loader',
              options: { sourceMap: !isProduction }
            },
            {
              loader: 'postcss-loader'
            }
          ]
        },
        {
          // D√πng ƒë·ªÉ import file ·∫£nh, n·∫øu c√≥ video/·∫£nh ƒë·ªãnh d·∫°ng kh√°c th√¨ th√™m v√†o ƒë√¢y
          test: /\.(png|svg|jpg|gif)$/,
          use: [
            {
              loader: 'file-loader',
              options: {
                name: isProduction ? 'static/media/[name].[contenthash:6].[ext]' : '[path][name].[ext]'
              }
            }
          ]
        },
        {
          // D√πng ƒë·ªÉ import font
          test: /\.(eot|ttf|woff|woff2)$/,
          use: [
            {
              loader: 'file-loader',
              options: {
                name: isProduction ? 'static/fonts/[name].[ext]' : '[path][name].[ext]'
              }
            }
          ]
        }
      ]
    },

    output: {
      // Th√™m m√£ hash t√™n file d·ª±a v√†o content ƒë·ªÉ tr√°nh b·ªã cache b·ªüi CDN hay browser.
      filename: 'static/js/main.[contenthash:6].js',
      // Build ra th∆∞ m·ª•c build
      path: path.resolve(__dirname, '../build'),
      publicPath: '/',
      clean: true
    },
    devServer: {
      // enable Hot Module Replacement, ki·ªÉu nh∆∞ reload nhanh
      hot: true,
      // Ch·∫°y port 3000 khi dev
      port: 3000,
      // Ph·∫£i set true n·∫øu kh√¥ng khi b·∫°n d√πng lazyload module React th√¨ s·∫Ω g·∫∑p l·ªói kh√¥ng load ƒë∆∞·ª£c file.
      historyApiFallback: true,
      // C·∫•u h√¨nh ph·ª•c v·ª• file html trong public
      static: {
        directory: path.resolve(__dirname, '../public', 'index.html'),
        serveIndex: true,
        // khi thay ƒë·ªïi content trong index.html th√¨ c≈©ng s·∫Ω reload
        watch: true
      }
    },
    devtool: isProduction ? false : 'source-map',
    plugins: [
      // ƒê∆∞a css ra th√†nh m·ªôt file .css ri√™ng bi·ªát thay v√¨ b·ªè v√†o file .js
      new MiniCssExtractPlugin({
        filename: isProduction ? 'static/css/[name].[contenthash:6].css' : '[name].css'
      }),
      // D√πng bi·∫øn m√¥i tr∆∞·ªùng env trong d·ª± √°n
      new Dotenv({
        path: 'env.development'
      }),
      // Copy m·ªçi files trong folder public tr·ª´ file index.html
      new CopyWebpackPlugin({
        patterns: [
          {
            from: 'public',
            to: '.',
            filter: (name) => {
              return !name.endsWith('index.html')
            }
          }
        ]
      }),

      // Plugin h·ªó tr·ª£ th√™m th·∫ª style v√† script v√†o index.html
      new HtmlWebpackPlugin({
        template: path.resolve(__dirname, '../public', 'index.html'),
        filename: 'index.html'
      }),
      // Th√™m eslint cho webpack
      new ESLintPlugin({
        extensions: ['.tsx', '.ts', '.js', '.jsx']
      })
    ]
  }

  //üöÄ N·∫øu build th√¨ s·∫Ω th√™m m·ªôt s·ªë config
  if (isProduction) {
    config.plugins = [
      ...config.plugins,
      // Hi·ªÉn th·ªã % khi build
      new webpack.ProgressPlugin(),
      // N√©n brotli css v√† js nh∆∞ng kh√¥ng hi·ªÉu sao ch·ªâ c√≥ js ƒë∆∞·ª£c n√©n ü•≤
      new CompressionPlugin({
        test: /\.(css|js)$/,
        algorithm: 'brotliCompress'
      }),
      // D·ªçn d·∫πp th∆∞ m·ª•c build tr∆∞·ªõc ƒë√≥ ƒë·ªÉ chu·∫©n b·ªã cho b·∫£n build hi·ªán t·∫°i
      new CleanWebpackPlugin()
    ]
    if (isAnalyze) {
      config.plugins = [...config.plugins, new BundleAnalyzerPlugin()]
    }
    config.optimization = {
      // minimizer: [
      //   `...`, // C√∫ ph√°p k·∫ø th·ª´a b·ªô minimizers m·∫∑c ƒë·ªãnh trong webpack 5 (i.e. `terser-webpack-plugin`)
      //   new CssMinimizerPlugin() // minify css
      // ]
      minimize: true,
      minimizer: [
        new TerserPlugin({
          // S·ª≠ d·ª•ng ch·∫°y song song nhi·ªÅu quy tr√¨nh ƒë·ªÉ c·∫£i thi·ªán t·ªëc ƒë·ªô x√¢y d·ª±ng
          parallel: 4,
          extractComments: false,
          terserOptions: {
            format: {
              comments: false
            },
            compress: {
              drop_console: true
            }
          }
        })
      ]
    }
    config.performance = {
      hints: false,
      maxEntrypointSize: 512000,
      maxAssetSize: 512000
    }
  }
  return config
}
